name: Deploy macOS

on: 
   push:
      branches: [ "master" ]
   pull_request:
      branches: [ "master" ]
   release:
      types: [published]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  AQT_VERSION: '==3.3.*'
  QT_VERSION: '6.9.1'
  ASSIMP_VERSION: '6.0.2'
  ASSIMP_DIR_VERSION: '6.0'
  OGRE_VERSION: '14.3.4'

jobs:
####################################################################
# MacOS Deploy 
####################################################################

 build-n-cache-assimp-macos:
    strategy:
      matrix:
        runner: [macos-latest, macos-intel]
        include:
          - runner: macos-latest
            arch: arm64
          - runner: macos-intel  
            arch: x86_64
    runs-on: ${{ matrix.runner }}
    steps:
    - name: Pre-checkout cleanup for Assimp (self-hosted runner safety)
      if: matrix.runner == 'macos-intel'
      run: |
            echo "üßπ Pre-checkout cleanup for Assimp build on self-hosted runner"
            
            # Force remove any leftover files with permission issues
            sudo rm -rf "${{github.workspace}}/assimp/" || true
            sudo rm -rf "${{github.workspace}}/assimp-build/" || true
            sudo rm -rf /Users/fernandotonon/actions-runner/_work/QtMeshEditor/QtMeshEditor/assimp/ || true
            sudo rm -rf /Users/fernandotonon/actions-runner/_work/QtMeshEditor/QtMeshEditor/assimp-build/ || true
            
            echo "‚úÖ Pre-checkout cleanup for Assimp completed"

    - name: Setup build environment (safe for self-hosted)
      run: |
            echo "Running on: ${{ matrix.runner }} (${{ matrix.arch }})"
            if [ "${{ matrix.runner }}" = "macos-intel" ]; then
              echo "‚ö†Ô∏è  Self-hosted runner detected - using safe operations"
            fi
            # Create directories safely (won't fail if they exist)
            sudo mkdir -p /usr/local/lib
            sudo mkdir -p /usr/local/include
            # Use safer permissions (755 instead of 777)
            sudo chmod -R 755 /usr/local/lib
            sudo chmod -R 755 /usr/local/include
            echo "‚úÖ Build environment ready"

    - name: Cache Assimp
      id: cache-assimp-macos
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-macos-${{ matrix.arch }}
      with:
        path: |
               /usr/local/lib/cmake
               /usr/local/include/assimp
               /usr/local/include/contrib
               /usr/local/lib/pkgconfig/assimp.pc
               /usr/local/lib/libassimp*
               /usr/local/lib/libzlibstatic.a
        #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('/home/runner/work/QtMeshEditor/QtMeshEditor/assimp') }}
        # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the assimp repo.
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          
    - if: steps.cache-assimp-macos.outputs.cache-hit != 'true'
      name: Check out Assimp repo
      uses: actions/checkout@master
      with:
          repository: assimp/assimp
          ref: v${{ env.ASSIMP_VERSION }}
          path: ${{github.workspace}}/assimp
      
    - if: steps.cache-assimp-macos.outputs.cache-hit != 'true'
      name: Build Assimp repo
      run: |
            echo "Building Assimp for ${{ matrix.arch }} architecture"
            echo "Workspace: ${{github.workspace}}"
            cmake -B ${{github.workspace}}/assimp-build -S ${{github.workspace}}/assimp -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
            cd ${{github.workspace}}/assimp-build/
            # Build first, then install (safer for self-hosted)
            make -j8
            sudo make install

    - name: Cleanup Assimp build (self-hosted runner safety)
      if: always() && matrix.runner == 'macos-intel'
      run: |
            echo "üßπ Cleaning up Assimp build files on self-hosted runner"
            rm -rf ${{github.workspace}}/assimp/ || true
            rm -rf ${{github.workspace}}/assimp-build/ || true
            echo "‚úÖ Assimp cleanup completed"

 build-n-cache-ogre-macos:
    needs: build-n-cache-assimp-macos
    strategy:
      matrix:
        runner: [macos-latest, macos-intel]
        include:
          - runner: macos-latest
            arch: arm64
          - runner: macos-intel  
            arch: x86_64
    runs-on: ${{ matrix.runner }}
    steps:    
    - name: Pre-checkout cleanup for Ogre (self-hosted runner safety)
      if: matrix.runner == 'macos-intel'
      run: |
            echo "üßπ Pre-checkout cleanup for Ogre build on self-hosted runner"
            
            # Force remove any leftover Ogre files with permission issues
            sudo rm -rf "${{github.workspace}}/ogre/" || true
            sudo rm -rf /Users/fernandotonon/actions-runner/_work/QtMeshEditor/QtMeshEditor/ogre/ || true
            
            # Clean any leftover Assimp files too
            sudo rm -rf "${{github.workspace}}/assimp/" || true
            sudo rm -rf "${{github.workspace}}/assimp-build/" || true
            sudo rm -rf /Users/fernandotonon/actions-runner/_work/QtMeshEditor/QtMeshEditor/assimp/ || true
            
            echo "‚úÖ Pre-checkout cleanup for Ogre completed"

    - name: Setup build environment (safe for self-hosted)
      run: |
          echo "Running on: ${{ matrix.runner }} (${{ matrix.arch }})"
          if [ "${{ matrix.runner }}" = "macos-intel" ]; then
            echo "‚ö†Ô∏è  Self-hosted runner detected - using safe operations"
          fi
          # Create directories safely (won't fail if they exist)
          sudo mkdir -p /usr/local/lib
          sudo mkdir -p /usr/local/include
          # Use safer permissions (755 instead of 777)
          sudo chmod -R 755 /usr/local/lib
          sudo chmod -R 755 /usr/local/include
          echo "‚úÖ Build environment ready"

    - name: Cache Assimp
      id: cache-assimp-macos
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-macos-${{ matrix.arch }}
      with:
        path: |
               /usr/local/lib/cmake
               /usr/local/include/assimp
               /usr/local/include/contrib
               /usr/local/lib/pkgconfig/assimp.pc
               /usr/local/lib/libassimp*
               /usr/local/lib/libzlibstatic.a
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
      
    - name: Cache Ogre
      id: cache-ogre-macos
      uses: actions/cache@v3
      env:
        cache-name: cache-ogre-macos-${{ matrix.arch }}
      with:
        path: ${{github.workspace}}/ogre/SDK
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    
    - if: steps.cache-ogre-macos.outputs.cache-hit != 'true'
      name: Check out ogre repo
      uses: actions/checkout@master
      with:
          repository: OGRECave/ogre
          ref: v${{ env.OGRE_VERSION }}
          path: ${{github.workspace}}/ogre
         
    - if: steps.cache-ogre-macos.outputs.cache-hit != 'true'
      name: Build Ogre3D repo
      run: |
            echo "Building Ogre3D for ${{ matrix.arch }} architecture"
            cd ${{github.workspace}}/ogre/
            # Install to SDK directory for caching (no sudo needed)
            cmake -S . -B build \
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/ogre/SDK \
            -DOGRE_BUILD_PLUGIN_ASSIMP=ON -Dassimp_DIR=/usr/local/lib/cmake/assimp-${{ env.ASSIMP_DIR_VERSION }}/ \
            -DOGRE_BUILD_PLUGIN_DOT_SCENE=ON -DOGRE_BUILD_RENDERSYSTEM_GL=ON -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON \
            -DOGRE_BUILD_RENDERSYSTEM_GLES2=OFF -DOGRE_BUILD_TESTS=OFF -DOGRE_BUILD_TOOLS=OFF -DOGRE_BUILD_SAMPLES=OFF \
            -DOGRE_BUILD_COMPONENT_CSHARP=OFF -DOGRE_BUILD_COMPONENT_JAVA=OFF -DOGRE_BUILD_COMPONENT_PYTHON=OFF \
            -DOGRE_INSTALL_TOOLS=OFF -DOGRE_INSTALL_DOCS=OFF -DOGRE_INSTALL_SAMPLES=OFF -DOGRE_BUILD_LIBS_AS_FRAMEWORKS=OFF \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
            # Build and install to local SDK directory
            cd build
            make -j8
            make install

    - name: Cleanup Ogre build (self-hosted runner safety)
      if: always() && matrix.runner == 'macos-intel'
      run: |
            echo "üßπ Cleaning up Ogre build files on self-hosted runner"
            rm -rf ${{github.workspace}}/ogre/ || true
            echo "‚úÖ Ogre cleanup completed"

 build-macos:
    needs: [build-n-cache-assimp-macos, build-n-cache-ogre-macos]
    strategy:
      matrix:
        runner: [macos-latest, macos-intel]
        include:
          - runner: macos-latest
            arch: arm64
          - runner: macos-intel  
            arch: x86_64
    runs-on: ${{ matrix.runner }}
    steps:
    - name: Pre-checkout cleanup (self-hosted runner safety)
      if: matrix.runner == 'macos-intel'
      run: |
            echo "üßπ Pre-checkout cleanup for self-hosted runner"
            echo "Workspace path: ${{github.workspace}}"
            
            # Force remove any leftover files with permission issues
            if [ -d "${{github.workspace}}" ]; then
              echo "Cleaning workspace directory..."
              sudo rm -rf "${{github.workspace}}" || true
              echo "Creating fresh workspace directory..."
              mkdir -p "${{github.workspace}}"
            fi
            
            # Also clean any potential build artifacts in common locations
            sudo rm -rf /Users/fernandotonon/actions-runner/_work/QtMeshEditor/QtMeshEditor/ogre/ || true
            sudo rm -rf /Users/fernandotonon/actions-runner/_work/QtMeshEditor/QtMeshEditor/assimp/ || true
            sudo rm -rf /Users/fernandotonon/actions-runner/_work/QtMeshEditor/QtMeshEditor/build/ || true
            
            echo "‚úÖ Pre-checkout cleanup completed"

    - name: Setup build environment (safe for self-hosted)
      run: |
            echo "Running on: ${{ matrix.runner }} (${{ matrix.arch }})"
            if [ "${{ matrix.runner }}" = "macos-intel" ]; then
              echo "‚ö†Ô∏è  Self-hosted runner detected - using safe operations"
            fi
            # Create directories safely (won't fail if they exist)
            sudo mkdir -p /usr/local/lib
            sudo mkdir -p /usr/local/include
            # Use safer permissions (755 instead of 777)
            sudo chmod -R 755 /usr/local/lib
            sudo chmod -R 755 /usr/local/include
            echo "‚úÖ Build environment ready"

    - uses: actions/checkout@v3
      with:
         submodules: true
         
    - run: |
            cd ${{github.workspace}}/src/dependencies/ogre-procedural
            git checkout master
            git pull

    - name: Setup Qt for self-hosted runner
      if: matrix.runner == 'macos-intel'
      run: |
            echo "üîß Setting up Qt from local installation for self-hosted runner"
            
            # Use existing Qt installation
            QT_LOCAL_PATH="/Users/fernandotonon/Qt/${{ env.QT_VERSION }}/macos"
            
            if [ -d "$QT_LOCAL_PATH" ]; then
              echo "‚úÖ Found local Qt installation at: $QT_LOCAL_PATH"
              echo "QT_ROOT_DIR=$QT_LOCAL_PATH" >> $GITHUB_ENV
              echo "Qt6_DIR=$QT_LOCAL_PATH/lib/cmake/Qt6" >> $GITHUB_ENV
              echo "QT_PLUGIN_PATH=$QT_LOCAL_PATH/plugins" >> $GITHUB_ENV
              echo "QT_QML2_PATH=$QT_LOCAL_PATH/qml" >> $GITHUB_ENV
              
              # Verify Qt installation
              ls -la "$QT_LOCAL_PATH/lib/cmake/" || echo "Warning: Qt cmake files not found"
              echo "Qt version check:"
              "$QT_LOCAL_PATH/bin/qmake" -version || echo "Warning: qmake not found"
            else
              echo "‚ùå Qt installation not found at: $QT_LOCAL_PATH"
              echo "Searching for Qt installations..."
              find /Users/fernandotonon/Qt -maxdepth 2 -type d -name "macos" 2>/dev/null || echo "No Qt installations found"
              exit 1
            fi
            
            echo "‚úÖ Qt setup completed for self-hosted runner"

    - name: Install Qt (GitHub-hosted runner only)
      if: matrix.runner == 'macos-latest'
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: ${{ env.AQT_VERSION }}
        version: ${{ env.QT_VERSION }}
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        tools: 'tools_cmake'

    - name: Setup Qt environment variables (GitHub-hosted runner only)
      if: matrix.runner == 'macos-latest'
      run: |
            echo "Setting up Qt environment variables for GitHub-hosted runner..."
            # The Qt action should have set these, but let's ensure they're available
            if [ -z "$QT_ROOT_DIR" ]; then
              # Fallback: find Qt installation directory
              export QT_ROOT_DIR=$(find /Users/runner/work/QtMeshEditor/QtMeshEditor/Qt -name "6.*" -type d | head -n 1)/macos
              echo "QT_ROOT_DIR=$QT_ROOT_DIR" >> $GITHUB_ENV
              echo "Set QT_ROOT_DIR to: $QT_ROOT_DIR"
            else
              echo "QT_ROOT_DIR already set to: $QT_ROOT_DIR"
            fi
            
            # Verify Qt installation
            if [ -d "$QT_ROOT_DIR" ]; then
              echo "‚úÖ Qt installation found at: $QT_ROOT_DIR"
              ls -la "$QT_ROOT_DIR/lib/cmake/"
            else
              echo "‚ùå Qt installation not found!"
              echo "Searching for Qt installations..."
              find /Users/runner/work/QtMeshEditor/QtMeshEditor/Qt -name "*Qt*" -type d 2>/dev/null || true
            fi

    - name: Debug paths (for troubleshooting)
      run: |
            echo "=== Path Debug Information ==="
            echo "Runner: ${{ matrix.runner }} (${{ matrix.arch }})"
            echo "GitHub Workspace: ${{github.workspace}}"
            echo "Qt Root Dir: $QT_ROOT_DIR"
            echo "Qt Plugin Path: $QT_PLUGIN_PATH"
            echo "Qt QML Path: $QT_QML2_PATH"
            echo "Current working directory: $(pwd)"
            echo "Directory contents:"
            ls -la
            echo "OGRE installation check:"
            if [ -d "${{github.workspace}}/ogre/SDK" ]; then
              echo "‚úÖ OGRE SDK found"
              ls -la "${{github.workspace}}/ogre/SDK/lib/cmake/" 2>/dev/null || echo "No cmake dir in OGRE SDK"
            else
              echo "‚ùå OGRE SDK not found"
            fi
            echo "=== End Debug Information ==="

    - name: Cache Assimp
      id: cache-assimp-macos
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-macos-${{ matrix.arch }}
      with:
        path: |
               /usr/local/lib/cmake
               /usr/local/include/assimp
               /usr/local/include/contrib
               /usr/local/lib/pkgconfig/assimp.pc
               /usr/local/lib/libassimp*
               /usr/local/lib/libzlibstatic.a
        key: ${{ runner.os }}-build-${{ env.cache-name }}
      
    - name: Cache Ogre
      id: cache-ogre-macos
      uses: actions/cache@v3
      env:
        cache-name: cache-ogre-macos-${{ matrix.arch }}
      with:
        path: ${{github.workspace}}/ogre/SDK
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    
    - name: Configure CMake
      run: |
            echo "Configuring QtMeshEditor for ${{ matrix.arch }} architecture"
            echo "Qt installation directory: $QT_ROOT_DIR"
            echo "Workspace: ${{github.workspace}}"
            
            # Find OGRE cmake files
            OGRE_CMAKE_DIR=""
            if [ -d "${{github.workspace}}/ogre/SDK/lib/cmake/OGRE" ]; then
              OGRE_CMAKE_DIR="${{github.workspace}}/ogre/SDK/lib/cmake/OGRE"
            elif [ -d "${{github.workspace}}/ogre/SDK/CMake" ]; then
              OGRE_CMAKE_DIR="${{github.workspace}}/ogre/SDK/CMake"
            else
              echo "Searching for OGRE cmake files..."
              find "${{github.workspace}}/ogre/SDK" -name "*OGRE*" -type d 2>/dev/null || true
              find "${{github.workspace}}/ogre/SDK" -name "*.cmake" 2>/dev/null || true
            fi
            
            echo "OGRE CMAKE DIR: $OGRE_CMAKE_DIR"
            
            # Configure without sudo first (safer for self-hosted)
            cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DCMAKE_PREFIX_PATH="${{github.workspace}}/ogre/SDK" \
            -DASSIMP_DIR=/usr/local/lib/cmake/assimp-${{ env.ASSIMP_DIR_VERSION }} \
            -DASSIMP_INCLUDE_DIR=/usr/local/include/assimp \
            -DQt6_DIR="$QT_ROOT_DIR/lib/cmake/Qt6" \
            -DQT_DIR="$QT_ROOT_DIR/lib/cmake/Qt6" \
            -DQt6GuiTools_DIR="$QT_ROOT_DIR/lib/cmake/Qt6GuiTools" \
            ${OGRE_CMAKE_DIR:+-DOGRE_DIR="$OGRE_CMAKE_DIR"} 
    
    - name: Build
      run: |
            echo "Building QtMeshEditor for ${{ matrix.arch }} architecture"
            cd build
            # Build first, then install (safer for self-hosted)
            make -j8
            sudo make install

    - name: Copy Qt libs to app folder
      run: |
            echo "Copying Qt frameworks for ${{ matrix.arch }} architecture"
            echo "Qt installation directory: $QT_ROOT_DIR"
            # Copy Qt frameworks (use dynamic Qt path)
            sudo cp -R "$QT_ROOT_DIR/lib/QtWidgets.framework" "${{github.workspace}}/bin/QtMeshEditor.app/Contents/MacOS/QtWidgets.framework"
            sudo cp -R "$QT_ROOT_DIR/lib/QtCore.framework" "${{github.workspace}}/bin/QtMeshEditor.app/Contents/MacOS/QtCore.framework"
            sudo cp -R "$QT_ROOT_DIR/lib/QtGui.framework" "${{github.workspace}}/bin/QtMeshEditor.app/Contents/MacOS/QtGui.framework"
            sudo cp -R "$QT_ROOT_DIR/lib/QtDBus.framework" "${{github.workspace}}/bin/QtMeshEditor.app/Contents/MacOS/QtDBus.framework"
            sudo cp -R "$QT_ROOT_DIR/plugins/platforms" "${{github.workspace}}/bin/QtMeshEditor.app/Contents/MacOS/platforms"
            # Copy Assimp libraries
            sudo cp -R /usr/local/lib/libassimp* ${{github.workspace}}/bin/QtMeshEditor.app/Contents/MacOS/

    - name: Prepare for packing
      run: |
            sudo cp -R ${{github.workspace}}/bin/media ${{github.workspace}}/bin/QtMeshEditor.app/Contents/MacOS/media
            sudo cp -R ${{github.workspace}}/bin/cfg ${{github.workspace}}/bin/QtMeshEditor.app/Contents/MacOS/cfg
            sudo cp -R ${{github.workspace}}/resources/icon.icns ${{github.workspace}}/bin/QtMeshEditor.app/Contents/MacOS/media
            sudo mkdir ${{github.workspace}}/bin/QtMeshEditor.app/Contents/Resources
            sudo cp -R ${{github.workspace}}/resources/icon.icns ${{github.workspace}}/bin/QtMeshEditor.app/Contents/Resources
            sudo cp -R ${{github.workspace}}/bin/Info.plist ${{github.workspace}}/bin/QtMeshEditor.app/Contents/
            sudo install_name_tool -add_rpath @loader_path/ ${{github.workspace}}/bin/QtMeshEditor.app/Contents/MacOS/QtMeshEditor

    - name: Pack
      run: | 
            brew install create-dmg
            sudo create-dmg \
            --volname "QtMeshEditor Installer" \
            --volicon "${{github.workspace}}/resources/icon.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "QtMeshEditor.app" 200 190 \
            --app-drop-link 600 185 \
            QtMeshEditor-${{github.ref_name}}-MacOS-${{ matrix.arch }}.dmg \
            ${{github.workspace}}/bin/QtMeshEditor.app
    
    - if: github.event_name == 'release' && github.event.action == 'published'
      uses: actions/upload-artifact@v4
      with:
        name: QtMeshEditor-MacOS-${{ matrix.arch }}
        path: ${{github.workspace}}/QtMeshEditor-${{github.ref_name}}-MacOS-${{ matrix.arch }}.dmg
        
    - if: github.event_name == 'release' && github.event.action == 'published'
      uses: xresloader/upload-to-github-release@main
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          file: QtMeshEditor-${{github.ref_name}}-MacOS-${{ matrix.arch }}.dmg
          update_latest_release: true
          overwrite: false
          verbose: true

    - name: Cleanup (self-hosted runner safety)
      if: always() && matrix.runner == 'macos-intel'
      run: |
            echo "üßπ Cleaning up main build files on self-hosted runner"
            echo "Workspace: ${{github.workspace}}"
            # Clean up main build directory (dependencies cleaned in their own jobs)
            rm -rf ${{github.workspace}}/build/ || true
            echo "‚úÖ Main build cleanup completed" 