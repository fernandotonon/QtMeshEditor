name: Dual Runner Universal Binary

on: 
   push:
      branches: [ "master" ]
   pull_request:
      branches: [ "master" ]
   release:
      types: [published]

env:
  BUILD_TYPE: Release
  QT_VERSION: '6.9.1'
  ASSIMP_VERSION: '6.0.2'
  OGRE_VERSION: '14.3.4'

jobs:
  ####################################################################
  # Build for ARM64 (GitHub-hosted macOS runner)
  ####################################################################
  build-arm64:
    runs-on: macos-latest  # GitHub ARM64 runner
    steps:
    - uses: actions/checkout@v3
      with:
         submodules: true
         
    - name: Verify runner architecture
      run: |
        echo "=== ARM64 Build Environment ==="
        echo "Runner architecture: $(uname -m)"
        echo "macOS version: $(sw_vers -productVersion)"
        echo "Xcode version: $(xcode-select --version)"
        
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        
    - name: Configure CMake for ARM64
      run: |
        cmake -B build-arm64 \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
          -DBUILD_TESTS=OFF
          
    - name: Build QtMeshEditor for ARM64
      run: |
        cmake --build build-arm64 --config ${{ env.BUILD_TYPE }} --parallel $(sysctl -n hw.ncpu)
        
    - name: Install and verify ARM64 build
      run: |
        cd build-arm64
        make install
        echo "=== ARM64 Binary Verification ==="
        if [ -f "bin/QtMeshEditor.app/Contents/MacOS/QtMeshEditor" ]; then
          lipo -info bin/QtMeshEditor.app/Contents/MacOS/QtMeshEditor
          file bin/QtMeshEditor.app/Contents/MacOS/QtMeshEditor
        else
          echo "ARM64 binary not found, searching..."
          find . -name "QtMeshEditor" -type f
          exit 1
        fi
        
    - name: Upload ARM64 artifact
      uses: actions/upload-artifact@v3
      with:
        name: qtmesheditor-arm64
        path: build-arm64/bin/QtMeshEditor.app
        retention-days: 1

  ####################################################################
  # Build for x86_64 (Self-hosted Intel Mac)
  ####################################################################
  build-x86_64:
    runs-on: [self-hosted, macos-intel]  # Your Intel Mac
    steps:
    - uses: actions/checkout@v3
      with:
         submodules: true
         
    - name: Verify runner architecture
      run: |
        echo "=== x86_64 Build Environment ==="
        echo "Runner architecture: $(uname -m)"
        echo "macOS version: $(sw_vers -productVersion)"
        echo "Xcode version: $(xcode-select --version)"
        
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        
    - name: Configure CMake for x86_64
      run: |
        cmake -B build-x86_64 \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
          -DBUILD_TESTS=OFF
          
    - name: Build QtMeshEditor for x86_64
      run: |
        cmake --build build-x86_64 --config ${{ env.BUILD_TYPE }} --parallel $(sysctl -n hw.ncpu)
        
    - name: Install and verify x86_64 build
      run: |
        cd build-x86_64
        make install
        echo "=== x86_64 Binary Verification ==="
        if [ -f "bin/QtMeshEditor.app/Contents/MacOS/QtMeshEditor" ]; then
          lipo -info bin/QtMeshEditor.app/Contents/MacOS/QtMeshEditor
          file bin/QtMeshEditor.app/Contents/MacOS/QtMeshEditor
        else
          echo "x86_64 binary not found, searching..."
          find . -name "QtMeshEditor" -type f
          exit 1
        fi
        
    - name: Upload x86_64 artifact
      uses: actions/upload-artifact@v3
      with:
        name: qtmesheditor-x86_64
        path: build-x86_64/bin/QtMeshEditor.app
        retention-days: 1

  ####################################################################
  # Combine using lipo -create
  ####################################################################
  create-universal:
    needs: [build-arm64, build-x86_64]
    runs-on: macos-latest
    steps:
    - name: Download ARM64 build
      uses: actions/download-artifact@v3
      with:
        name: qtmesheditor-arm64
        path: arm64-app
        
    - name: Download x86_64 build
      uses: actions/download-artifact@v3
      with:
        name: qtmesheditor-x86_64
        path: x86_64-app
        
    - name: Verify architecture-specific builds
      run: |
        echo "=== Pre-lipo Verification ==="
        
        # Check ARM64 binary
        if [ -f "arm64-app/QtMeshEditor.app/Contents/MacOS/QtMeshEditor" ]; then
          echo "ARM64 binary:"
          lipo -info arm64-app/QtMeshEditor.app/Contents/MacOS/QtMeshEditor
        else
          echo "❌ ARM64 binary not found"
          find arm64-app -name "QtMeshEditor" -type f
          exit 1
        fi
        
        # Check x86_64 binary  
        if [ -f "x86_64-app/QtMeshEditor.app/Contents/MacOS/QtMeshEditor" ]; then
          echo "x86_64 binary:"
          lipo -info x86_64-app/QtMeshEditor.app/Contents/MacOS/QtMeshEditor
        else
          echo "❌ x86_64 binary not found"
          find x86_64-app -name "QtMeshEditor" -type f
          exit 1
        fi
        
    - name: Create universal binary with lipo
      run: |
        echo "=== Creating Universal Binary with lipo -create ==="
        
        # Copy the app bundle structure (using ARM64 as base)
        cp -R arm64-app/QtMeshEditor.app universal-app
        
        # Create universal binary using lipo -create
        lipo -create \
          -output universal-app/Contents/MacOS/QtMeshEditor \
          arm64-app/QtMeshEditor.app/Contents/MacOS/QtMeshEditor \
          x86_64-app/QtMeshEditor.app/Contents/MacOS/QtMeshEditor
          
        echo "✅ Universal binary created successfully"
        
    - name: Verify universal binary
      run: |
        echo "=== Universal Binary Verification ==="
        
        # Check the universal binary
        echo "Universal binary info:"
        lipo -info universal-app/Contents/MacOS/QtMeshEditor
        echo ""
        
        echo "File type:"
        file universal-app/Contents/MacOS/QtMeshEditor
        echo ""
        
        echo "Detailed architecture info:"
        lipo -detailed_info universal-app/Contents/MacOS/QtMeshEditor
        echo ""
        
        # Verify it contains both architectures
        if lipo -info universal-app/Contents/MacOS/QtMeshEditor | grep -q "arm64.*x86_64\|x86_64.*arm64"; then
          echo "✅ SUCCESS: Universal binary contains both ARM64 and x86_64!"
        else
          echo "❌ ERROR: Universal binary verification failed"
          echo "Expected both arm64 and x86_64 architectures"
          exit 1
        fi
        
        # Check file size comparison
        echo "=== Size Comparison ==="
        echo "ARM64 binary size: $(stat -f%z arm64-app/QtMeshEditor.app/Contents/MacOS/QtMeshEditor) bytes"
        echo "x86_64 binary size: $(stat -f%z x86_64-app/QtMeshEditor.app/Contents/MacOS/QtMeshEditor) bytes"
        echo "Universal binary size: $(stat -f%z universal-app/Contents/MacOS/QtMeshEditor) bytes"
        
    - name: Code sign universal app
      run: |
        echo "=== Code Signing Universal App ==="
        
        # Sign the main executable
        codesign --force --sign - universal-app/Contents/MacOS/QtMeshEditor
        
        # Sign the entire app bundle
        codesign --force --sign - universal-app
        
        # Verify the signature
        echo "Verifying code signature:"
        codesign --verify --verbose universal-app || echo "Verification failed (non-fatal)"
        
    - name: Create DMG package
      run: |
        echo "=== Creating DMG Package ==="
        
        # Install create-dmg if needed
        if ! command -v create-dmg &> /dev/null; then
          brew install create-dmg
        fi
        
        # Create the DMG
        create-dmg \
          --volname "QtMeshEditor Universal" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "QtMeshEditor.app" 200 190 \
          --app-drop-link 600 185 \
          "QtMeshEditor-Universal-${GITHUB_REF_NAME:-latest}.dmg" \
          universal-app
          
    - name: Upload universal app artifact
      uses: actions/upload-artifact@v3
      with:
        name: qtmesheditor-universal
        path: |
          universal-app
          QtMeshEditor-Universal-*.dmg
          
    - name: Upload to release
      if: github.event_name == 'release' && github.event.action == 'published'
      uses: xresloader/upload-to-github-release@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: QtMeshEditor-Universal-*.dmg
        update_latest_release: true
        overwrite: false
        verbose: true
        
    - name: Summary report
      run: |
        echo "=== Build Summary ==="
        echo "✅ ARM64 build: Completed on GitHub runner"
        echo "✅ x86_64 build: Completed on self-hosted Intel Mac"
        echo "✅ Universal binary: Created with lipo -create"
        echo "✅ Code signing: Applied"
        echo "✅ DMG package: Created"
        echo ""
        echo "Final universal binary info:"
        lipo -info universal-app/Contents/MacOS/QtMeshEditor 