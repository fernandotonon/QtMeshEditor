name: Deploy Linux

on: 
   push:
      branches: [ "master" ]
   pull_request:
      branches: [ "master" ]
   release:
      types: [published]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  AQT_VERSION: '==3.3.*'
  QT_VERSION: '6.9.1'
  ASSIMP_VERSION: '6.0.2'
  ASSIMP_DIR_VERSION: '6.0'
  OGRE_VERSION: '14.3.4'

jobs:
####################################################################
# Linux Deploy
####################################################################

 build-n-cache-assimp-linux:
   runs-on: ubuntu-latest
   steps:        
    - name: change folder permissions
      run: |
            sudo chmod -R 777 /usr/local/lib
            sudo chmod -R 777 /usr/local/include

    - name: Cache Assimp
      id: cache-assimp-linux
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-linux
      with:
        # Assimp cache files are stored in `/home/runner/work/QtMeshEditor/assimp` on Linux/macOS
        path: |
               /usr/local/lib/cmake/
               /usr/local/include/assimp
               /usr/local/include/contrib
               /usr/local/lib/pkgconfig/assimp.pc
               /usr/local/lib/libassimp*
               /usr/local/lib/libzlibstatic.a
        #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('/home/runner/work/QtMeshEditor/QtMeshEditor/assimp') }}
        # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the assimp repo.
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - if: steps.cache-assimp-linux.outputs.cache-hit != 'true'
      name: Check out Assimp repo
      uses: actions/checkout@master
      with:
          repository: assimp/assimp
          ref: v${{ env.ASSIMP_VERSION }}
          path: /home/runner/work/QtMeshEditor/QtMeshEditor/assimp
            
    - if: steps.cache-assimp-linux.outputs.cache-hit != 'true'
      name: Build Assimp repo
      run: |
            cmake -B /home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build -S /home/runner/work/QtMeshEditor/QtMeshEditor/assimp -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
            cd /home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build/
            sudo make install -j8

 build-n-cache-ogre-linux:
    needs: build-n-cache-assimp-linux
    runs-on: ubuntu-latest
    steps:        
    - name: change folder permissions
      run: |
            sudo chmod -R 777 /usr/local/lib
            sudo chmod -R 777 /usr/local/include
            sudo chmod -R 777 /usr/local/share
      
    - name: Cache Ogre
      id: cache-ogre-linux
      uses: actions/cache@v3
      env:
        cache-name: cache-ogre-linux
      with:
        path: |
               /usr/local/lib/lib*
               /usr/local/share/OGRE/
               /usr/local/share/OGRE*
               /usr/local/include/OGRE/
               /usr/local/lib/OGRE/
               /usr/local/lib/pkgconfig/
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - if: steps.cache-ogre-linux.outputs.cache-hit != 'true'
      name: Cache Assimp
      id: cache-assimp-linux
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-linux
      with:
        # Assimp cache files are stored in `/home/runner/work/QtMeshEditor/assimp` on Linux/macOS
        path: |
               /usr/local/lib/cmake/
               /usr/local/include/assimp
               /usr/local/include/contrib
               /usr/local/lib/pkgconfig/assimp.pc
               /usr/local/lib/libassimp*
               /usr/local/lib/libzlibstatic.a
        #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('/home/runner/work/QtMeshEditor/QtMeshEditor/assimp') }}
        # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the assimp repo.
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - if: steps.cache-ogre-linux.outputs.cache-hit != 'true'
      name: install openGL
      run: |
            sudo apt update
            sudo apt-get install freeglut3-dev libxrandr-dev
            
    - if: steps.cache-ogre-linux.outputs.cache-hit != 'true'
      name: Check out ogre repo
      uses: actions/checkout@master
      with:
          repository: OGRECave/ogre
          ref: v${{ env.OGRE_VERSION }}
          path: /home/runner/work/QtMeshEditor/QtMeshEditor/ogre
         
    - if: steps.cache-ogre-linux.outputs.cache-hit != 'true'
      name: Build Ogre3D repo
      run: |
            sudo cmake -B /home/runner/work/QtMeshEditor/QtMeshEditor/ogre-build \
            -S /home/runner/work/QtMeshEditor/QtMeshEditor/ogre \
            -DOGRE_BUILD_PLUGIN_ASSIMP=ON -Dassimp_DIR=/usr/local/lib/cmake/assimp-${{ env.ASSIMP_DIR_VERSION }} \
            -DOGRE_BUILD_PLUGIN_DOT_SCENE=ON -DOGRE_BUILD_RENDERSYSTEM_GL=ON \
            -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON -DOGRE_BUILD_RENDERSYSTEM_GLES2=OFF \
            -DOGRE_BUILD_TESTS=OFF -DOGRE_BUILD_TOOLS=OFF -DOGRE_BUILD_SAMPLES=OFF \
            -DOGRE_BUILD_COMPONENT_CSHARP=OFF -DOGRE_BUILD_COMPONENT_JAVA=OFF \
            -DOGRE_BUILD_COMPONENT_BULLET=OFF \
            -DOGRE_BUILD_COMPONENT_PYTHON=OFF -DOGRE_INSTALL_TOOLS=OFF \
            -DOGRE_INSTALL_DOCS=OFF -DOGRE_INSTALL_SAMPLES=OFF \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
            cd /home/runner/work/QtMeshEditor/QtMeshEditor/ogre-build/
            sudo make install -j8
      
 build-linux:
    needs: [build-n-cache-assimp-linux, build-n-cache-ogre-linux]
    runs-on: ubuntu-latest
    env: 
      LD_LIBRARY_PATH: /usr/local/lib/:/usr/local/lib/OGRE/:/usr/local/lib/pkgconfig/
    steps:
    - uses: actions/checkout@v3.5.3
      with:
         submodules: true
           
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: ${{ env.AQT_VERSION }}
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        arch: 'linux_gcc_64'

    - name: change folder permissions
      run: |
          sudo chmod -R 777 /usr/local/lib
          sudo chmod -R 777 /usr/local/include
          sudo chmod -R 777 /usr/local/share
        
    - name: Cache Assimp
      id: cache-assimp-linux
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-linux
      with:
        path: |
               /usr/local/lib/cmake/
               /usr/local/include/assimp
               /usr/local/include/contrib
               /usr/local/lib/pkgconfig/assimp.pc
               /usr/local/lib/libassimp*
               /usr/local/lib/libzlibstatic.a
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
    
    - name: Cache Ogre
      id: cache-ogre-linux
      uses: actions/cache@v3
      env:
        cache-name: cache-ogre-linux
      with:
        path: |
               /usr/local/lib/lib*
               /usr/local/share/OGRE/
               /usr/local/share/OGRE*
               /usr/local/include/OGRE/
               /usr/local/lib/OGRE/
               /usr/local/lib/pkgconfig/
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Configure CMake
      run: |
            sudo cmake -S . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DASSIMP_DIR=/usr/local/lib/cmake/assimp-${{ env.ASSIMP_DIR_VERSION }} \
            -DASSIMP_INCLUDE_DIR=/usr/local/include/assimp \
            -DQt6_DIR=/home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/cmake/Qt6 \
            -DQT_DIR=/home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/cmake/Qt6 \
            -DQt6GuiTools_DIR=/home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/cmake/Qt6GuiTools 

    - name: Build
      run: sudo make install -j8

    - name: Add missing libraries
      run: |
            # Create the bin directory since cmake builds to build/bin but we need ./bin for the tests
            mkdir -p ./bin
            mkdir -p ./build/bin
            
            # Copy Qt ICU libraries to both locations
            sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicui18n.* ./bin
            sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicuuc.* ./bin
            sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicudata.* ./bin
            
            # Also copy to build/bin where cmake actually puts the executables
            sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicui18n.* ./build/bin/ || true
            sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicuuc.* ./build/bin/ || true
            sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicudata.* ./build/bin/ || true
            
            # Copy libraries to system locations
            sudo cp -R ./bin/*.so* /lib/x86_64-linux-gnu || true
            sudo cp -R /usr/local/lib/OGRE/* /lib/x86_64-linux-gnu || true
            sudo cp -R /usr/local/lib/OGRE/* ./bin || true
            sudo cp -R /usr/local/lib/OGRE/* ./build/bin/ || true
  
    - name: Manual Pack
      run: |
            echo "Creating folders 'n files"
            mkdir -p ./pack-deb/usr/local/bin
            mkdir -p ./pack-deb/usr/share/qtmesheditor/
            mkdir ./pack-deb/usr/share/qtmesheditor/cfg/
            mkdir ./pack-deb/usr/share/qtmesheditor/media/
            mkdir ./pack-deb/usr/share/qtmesheditor/platforms/
            mkdir -p ./pack-deb/lib/x86_64-linux-gnu/
            mkdir ./pack-deb/DEBIAN/
            cp ./bin/DEBIAN-control ./pack-deb/DEBIAN/control
            cp ./bin/QtMeshEditor ./pack-deb/usr/share/qtmesheditor/qtmesheditor
            touch ./pack-deb/usr/local/bin/qtmesheditor
            echo "/usr/share/qtmesheditor/qtmesheditor" >> ./pack-deb/usr/local/bin/qtmesheditor
            sudo chmod 755 ./pack-deb/usr/local/bin/qtmesheditor
            cp -R ./bin/cfg/ ./pack-deb/usr/share/qtmesheditor/
            sudo chmod -R 755 ./pack-deb/usr/share/qtmesheditor/cfg
            cp -R ./bin/media/ ./pack-deb/usr/share/qtmesheditor/
            cp -R ./bin/platforms/ ./pack-deb/usr/share/qtmesheditor/
            cp -R ./bin/*.so* ./pack-deb/lib/x86_64-linux-gnu/
            dpkg-deb --build --root-owner-group pack-deb 
            mv pack-deb.deb qtmesheditor_amd64.deb
    
    - uses: actions/upload-artifact@v4
      if: github.event_name == 'release' && github.event.action == 'published'
      with:
        name: linux-binaries
        path: ${{github.workspace}}/*.deb

    - if: github.event_name == 'release' && github.event.action == 'published'
      uses: xresloader/upload-to-github-release@main
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          file: ${{github.workspace}}/*.deb
          update_latest_release: true
          overwrite: false
          verbose: true

####################################################################
# Unit Tests - on Linux 
####################################################################
      
 unit-tests-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    needs: [build-n-cache-assimp-linux, build-n-cache-ogre-linux]
    runs-on: ubuntu-latest
    permissions: read-all
    env: 
          LD_LIBRARY_PATH: gcc_64/lib/:/usr/local/lib/:/usr/local/lib/OGRE/:/usr/local/lib/pkgconfig/:/lib/x86_64-linux-gnu/
          BUILD_WRAPPER_OUT_DIR: ./
          QT_QPA_PLATFORM: offscreen
          QT_DEBUG_PLUGINS: 0
          DISPLAY: :99
    steps:
    - uses: actions/checkout@v3.5.3
      with:
         submodules: true
         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
           
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: ${{ env.AQT_VERSION }}
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        arch: 'linux_gcc_64'

    - name: change folder permissions
      run: |
          sudo chmod -R 777 /usr/local/lib
          sudo chmod -R 777 /usr/local/include
          sudo chmod -R 777 /usr/local/share
           
    - name: Cache Assimp
      id: cache-assimp-linux
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-linux
      with:
        path: |
               /usr/local/lib/cmake/
               /usr/local/include/assimp
               /usr/local/include/contrib
               /usr/local/lib/pkgconfig/assimp.pc
               /usr/local/lib/libassimp*
               /usr/local/lib/libzlibstatic.a
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
    
    - name: Cache Ogre
      id: cache-ogre-linux
      uses: actions/cache@v3
      env:
        cache-name: cache-ogre-linux
      with:
        path: |
               /usr/local/lib/lib*
               /usr/local/share/OGRE/
               /usr/local/share/OGRE*
               /usr/local/include/OGRE/
               /usr/local/lib/OGRE/
               /usr/local/lib/pkgconfig/
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Install SonarCloud CLI
      run: |
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
        unzip -o sonar-scanner.zip
        echo "${GITHUB_WORKSPACE}/sonar-scanner-4.7.0.2747-linux/bin" >> $GITHUB_PATH

    - name: Install build wrapper
      run: |
        curl -sSLo build-wrapper-linux-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
        unzip -o build-wrapper-linux-x86.zip
        echo "${GITHUB_WORKSPACE}/build-wrapper-linux-x86" >> $GITHUB_PATH

    - name: Configure CMake with SonarCloud build wrapper
      run: |
          echo "=== CMake Configuration with Build Wrapper ==="
          echo "Using build wrapper: $(which build-wrapper-linux-x86-64)"
          echo "Build wrapper output directory: ${{ env.BUILD_WRAPPER_OUT_DIR }}"
          
          sudo cmake -B build -S . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_CXX_FLAGS="-g -O0 --coverage -fprofile-arcs -ftest-coverage" \
          -DCMAKE_C_FLAGS="-g -O0 --coverage -fprofile-arcs -ftest-coverage" \
          -DCMAKE_EXE_LINKER_FLAGS="--coverage" \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DBUILD_TESTS=ON \
          -DASSIMP_DIR=/usr/local/lib/cmake/assimp-${{ env.ASSIMP_DIR_VERSION }} \
          -DASSIMP_INCLUDE_DIR=/usr/local/include/assimp \
          -DQt6_DIR=/home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/cmake/Qt6 \
          -DQT_DIR=/home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/cmake/Qt6 \
          -DQt6GuiTools_DIR=/home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/cmake/Qt6GuiTools

    - name: Build with SonarCloud build wrapper
      run: |
          echo "=== Building with SonarCloud build wrapper ==="
          echo "Build wrapper output directory: ${{ env.BUILD_WRAPPER_OUT_DIR }}"
          ls -la "${GITHUB_WORKSPACE}/build-wrapper-linux-x86/" || echo "Build wrapper directory not found"
          
          # Use the full path to build-wrapper since it might not be in PATH yet
          "${GITHUB_WORKSPACE}/build-wrapper-linux-x86/build-wrapper-linux-x86-64" --out-dir "${{ env.BUILD_WRAPPER_OUT_DIR }}" make -C build install -j8

    - name: Add missing libraries
      run: |
          # Create the bin directory since cmake builds to build/bin but we need ./bin for the tests
          mkdir -p ./bin
          mkdir -p ./build/bin
          
          # Copy Qt ICU libraries to both locations
          sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicui18n.* ./bin
          sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicuuc.* ./bin
          sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicudata.* ./bin
          
          # Also copy to build/bin where cmake actually puts the executables
          sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicui18n.* ./build/bin/ || true
          sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicuuc.* ./build/bin/ || true
          sudo cp -R /home/runner/work/QtMeshEditor/Qt/${{ env.QT_VERSION }}/gcc_64/lib/libicudata.* ./build/bin/ || true
          
          # Copy libraries to system locations
          sudo cp -R ./bin/*.so* /lib/x86_64-linux-gnu || true
          sudo cp -R /usr/local/lib/OGRE/* /lib/x86_64-linux-gnu || true
          sudo cp -R /usr/local/lib/OGRE/* ./bin || true
          sudo cp -R /usr/local/lib/OGRE/* ./build/bin/ || true

    - name: Start display server for QML tests
      run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          # Start Xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          # Give it time to start
          sleep 3

    - name: Run Unit Tests with Coverage
      run: |
            echo "=== Starting Unit Tests ==="
            echo "Current directory: $(pwd)"
            echo "Environment variables:"
            echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
            echo "QT_QPA_PLATFORM: $QT_QPA_PLATFORM"
            echo "DISPLAY: $DISPLAY"
            
            echo "=== Available test executables ==="
            find build -name "*test*" -type f -executable 2>/dev/null | head -20 || echo "Test search completed"
            find . -name "*test*" -type f -executable 2>/dev/null | head -20 || echo "Test search completed"
            
            # Function to run tests and capture results
            run_test() {
                local test_name="$1"
                local result_file="$2"
                echo "=== Running $test_name ==="
                if [ -f "build/bin/$test_name" ]; then
                    echo "Found test executable: build/bin/$test_name"
                    sudo chmod +x "build/bin/$test_name"
                    cd build/bin
                    timeout 300 ./"$test_name" -o "$result_file,junitxml" || echo "$test_name completed with exit code $?"
                    cd ../..
                elif [ -f "./$test_name" ]; then
                    echo "Found test executable: ./$test_name"
                    sudo chmod +x "./$test_name"
                    timeout 300 ./"$test_name" -o "$result_file,junitxml" || echo "$test_name completed with exit code $?"
                else
                    echo "Test executable $test_name not found"
                    # Look for it in common locations
                    find . -name "$test_name" -type f 2>/dev/null | head -5
                fi
                echo "=== $test_name execution completed ==="
            }
            
            echo "Running Unit Tests..."
            run_test "UnitTests" "test-results-unit.xml" || echo "UnitTests not found"
            
            echo "Running My Tests..."
            run_test "MyTests" "test-results-my.xml" || echo "MyTests not found"
            
            echo "Running QML Component Tests..."
            run_test "MaterialEditorQML_qml_test_runner" "test-results-qml-component.xml" || echo "MaterialEditorQML_qml_test_runner not found"

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results-*.xml
          
    - name: Set up Python 3.8 for gcovr
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
        
    - name: install gcovr 6.0
      run: |
        pip install gcovr==6.0
         
    - name: Generate coverage data
      run: |
        echo "=== Coverage Generation Debug Info ==="
        echo "Current directory: $(pwd)"
        echo "Build directory contents:"
        find build -name "*.o" -type f | head -10 || echo "No .o files found"
        echo "Looking for .gcda files:"
        find build -name "*.gcda" -type f | head -10 || echo "No .gcda files found"
        echo "Looking for .gcno files:"
        find build -name "*.gcno" -type f | head -10 || echo "No .gcno files found"
        
        echo "=== Generating gcov files ==="
        # Change to build directory to generate gcov files with correct paths
        cd build
        
        # Generate gcov files for all object files including the new tests
        find . -name "*.o" -exec gcov {} \; 2>/dev/null || echo "gcov generation completed with some warnings"
        
        # Return to root directory
        cd ..
        
        echo "=== Generated gcov files ==="
        find . -name "*.gcov" | head -10 || echo "No .gcov files found"
        
        echo "=== Running gcovr ==="
        # Run gcovr to generate coverage reports with better error handling
        gcovr --root . --filter src/ \
              --exclude 'src/OgreXML/.*' \
              --exclude 'src/dependencies/.*' \
              --exclude '.*_test\.cpp' \
              --exclude '.*_autogen.*' \
              --exclude '.*/CMakeFiles/.*' \
              --exclude '.*/ui_files/.*' \
              --exclude '.*/moc_.*' \
              --xml-pretty --xml coverage.xml \
              --html --html-details -o coverage.html \
              --verbose 2>&1 || echo "gcovr completed with warnings"
              
        echo "=== Coverage files generated ==="
        ls -la coverage.* || echo "No coverage files found"

    - name: Run sonar-scanner
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
      run: |
          echo "=== SonarCloud Analysis Setup ==="
          echo "SONAR_TOKEN is set: $([ -n "$SONAR_TOKEN" ] && echo "yes" || echo "no")"
          echo "GITHUB_TOKEN is set: $([ -n "$GITHUB_TOKEN" ] && echo "yes" || echo "no")"
          echo "Build wrapper output directory: ${{ env.BUILD_WRAPPER_OUT_DIR }}"
          
          echo "=== Checking required files ==="
          ls -la sonar-project.properties || echo "sonar-project.properties not found"
          ls -la coverage.xml || echo "coverage.xml not found"
          ls -la "${{ env.BUILD_WRAPPER_OUT_DIR }}" || echo "Build wrapper output directory not found"
          
          echo "=== Running SonarCloud analysis ==="
          sonar-scanner \
            -Dsonar.projectKey=fernandotonon_QtMeshEditor \
            -Dsonar.organization=fernandotonon \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login="$SONAR_TOKEN" \
            -Dsonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            -Dsonar.cfamily.gcov.reportsPath=. \
            -Dsonar.cfamily.compile-commands=build/compile_commands.json \
            -Dsonar.coverage.jacoco.xmlReportPaths=coverage.xml \
            -Dsonar.sources=src/ \
            -Dsonar.tests=src/,tests/ \
            -Dsonar.test.inclusions=**/*_test.cpp,**/test_*.cpp,tests/**/*.cpp \
            -Dsonar.exclusions=**/OgreXML/**,**/dependencies/**,**/*_autogen/**,**/CMakeFiles/**,**/ui_files/**,**/moc_*,**/_deps/** \
            -Dsonar.coverage.exclusions=**/*_test.cpp,**/test_*.cpp,tests/**/*.cpp,tests/**/*.qml,**/*_autogen/** \
            -Dsonar.verbose=true || echo "SonarCloud analysis completed with warnings"
          

            
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage.xml
          coverage.html 