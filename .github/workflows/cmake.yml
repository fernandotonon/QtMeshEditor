name: CMake

on: 
   push:
     branches: [ "master" ]
   pull_request:
     branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
#  send-slack-notification:
#    runs-on: ubuntu-latest
#    steps:
#       - name: send slack message
#         uses: docker://technosophos/slack-notify
#         env:
#             SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#             SLACK_MESSAGE: "Building QtMeshEditor in GitHub Actions - works! :D"

 build-n-cache-assimp-windows:
   runs-on: windows-latest
   steps:
    - name: Set up MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
          platform: x64  
          
    - name: Cache Assimp
      id: cache-assimp-windows
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-windows
      with:
        # It is caching the folder that also contains source and building files, maybe in the future it would be nice cache only the includes and dll
        path: C:/Program Files (x86)/Assimp
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    
    - if: steps.cache-assimp-windows.outputs.cache-hit != 'true'
      name: Check out Assimp repo
      uses: actions/checkout@master
      with:
          repository: assimp/assimp
          path: ${{github.workspace}}/assimp
         
    - if: steps.cache-assimp-windows.outputs.cache-hit != 'true'
      name: Build Assimp repo
      env:
         CMAKE_GENERATOR: "MinGW Makefiles"
      run: |
            cd ${{github.workspace}}/assimp
            cmake -S . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_GENERATOR="MinGW Makefiles" -DASSIMP_WARNINGS_AS_ERRORS=OFF
            mingw32-make install -j8
      # cmake --build ./ --config ${{env.BUILD_TYPE}}
            
#  build-n-cache-ogre-windows:
#     #needs: build-n-cache-assimp-windows
#     runs-on: windows-latest
#     steps:
#     - name: Cache Assimp
#       id: cache-assimp-windows
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-assimp-windows
#       with:
#         # It is caching the folder that also contains source and building files, maybe in the future it would be nice cache only the includes and dll
#         path: ${{github.workspace}}/assimp
#         key: ${{ runner.os }}-build-${{ env.cache-name }}
      
#     - name: Cache Ogre
#       id: cache-ogre-windows
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-ogre-windows
#       with:
#         path: ${{github.workspace}}/ogre
#         # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the ogre repo.
#         key: ${{ runner.os }}-build-${{ env.cache-name }}
            
#     - if: steps.cache-ogre-windows.outputs.cache-hit != 'true'
#       name: Check out ogre repo
#       uses: actions/checkout@master
#       with:
#           repository: OGRECave/ogre
#           path: ${{github.workspace}}/ogre

#     - if: steps.cache-ogre-windows.outputs.cache-hit != 'true'
#       name: Set up MinGW
#       uses: egor-tensin/setup-mingw@v2
#       with:
#           platform: x64        
          
#     - if: steps.cache-ogre-windows.outputs.cache-hit != 'true'
#       name: Build Ogre3D repo
#       shell: cmd
#       run: |
#             cd ${{github.workspace}}/ogre
#             cmake -S . -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DOGRE_BUILD_PLUGIN_ASSIMP=ON -DASSIMP_DIR=${{github.workspace}}/assimp -DOGRE_BUILD_PLUGIN_DOT_SCENE=ON -DOGRE_BUILD_RENDERSYSTEM_GL=ON -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON -DOGRE_BUILD_RENDERSYSTEM_GLES2=OFF -DOGRE_BUILD_TESTS=OFF -DOGRE_BUILD_TOOLS=OFF -DOGRE_BUILD_SAMPLES=OFF -DOGRE_BUILD_COMPONENT_CSHARP=OFF -DOGRE_BUILD_COMPONENT_JAVA=OFF -DOGRE_BUILD_COMPONENT_PYTHON=OFF -DOGRE_INSTALL_TOOLS=OFF -DOGRE_INSTALL_DOCS=OFF -DOGRE_INSTALL_SAMPLES=OFF -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#             cmake --build . --config ${{env.BUILD_TYPE}}
            
 build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
   # needs: [build-n-cache-assimp-windows, build-n-cache-ogre-windows]
    needs: build-n-cache-assimp-windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
         submodules: true

    - name: Set up MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
          platform: x64   

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==2.1.*'
        version: '6.5.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
        #arch: 'win64_msvc2019_64'
        tools: 'tools_cmake'

    - name: Cache Assimp
      id: cache-assimp-windows
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-windows
      with:
        # It is caching the folder that also contains source and building files, maybe in the future it would be nice cache only the includes and dll
        path: C:/Program Files (x86)/Assimp
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Cache Ogre
      id: cache-ogre-windows
      uses: actions/cache@v3
      env:
        cache-name: cache-ogre-windows
      with:
        path: ${{github.workspace}}/ogre
        # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the ogre repo.
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - if: steps.cache-ogre-windows.outputs.cache-hit != 'true'
      name: Check out ogre repo
      uses: actions/checkout@master
      with:
          repository: OGRECave/ogre
          path: ${{github.workspace}}/ogre

    - if: steps.cache-ogre-windows.outputs.cache-hit != 'true'
      name: Build Ogre3D repo
      run: |
            cd D:/a/QtMeshEditor/QtMeshEditor/ogre
            cmake -S . -GNinja -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ \
            -DOGRE_BUILD_PLUGIN_ASSIMP=ON \
            -DASSIMP_DIR=C:/Program Files (x86)/Assimp/lib/cmake/assimp-5.2/ \
            -DOGRE_BUILD_PLUGIN_DOT_SCENE=ON -DOGRE_BUILD_RENDERSYSTEM_GL=ON \
            -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON -DOGRE_BUILD_RENDERSYSTEM_GLES2=OFF \
            -DOGRE_BUILD_TESTS=OFF -DOGRE_BUILD_TOOLS=OFF -DOGRE_BUILD_SAMPLES=OFF \
            -DOGRE_BUILD_COMPONENT_CSHARP=OFF -DOGRE_BUILD_COMPONENT_JAVA=OFF \
            -DOGRE_BUILD_COMPONENT_PYTHON=OFF -DOGRE_INSTALL_TOOLS=OFF \
            -DOGRE_INSTALL_DOCS=OFF -DOGRE_INSTALL_SAMPLES=OFF \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
            cmake --build . --config ${{env.BUILD_TYPE}}
    
    - name: Configure CMake
      continue-on-error: true
      env:
         OGRE_DIR: ${{github.workspace}}/ogre/SDK/CMake/
      run: |
            cmake -S . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DQT_QMAKE_EXECUTABLE=qmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ \
            -DQt6_DIR=D:/a/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6 \
            -DQT_DIR=D:/a/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6 \
            -DQt6GuiTools_DIR=D:/a/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6GuiTools \
            -DOGRE_DIR=${{github.workspace}}/ogre/SDK/CMake/
      shell: cmd

    - name: Build
      # Build your program with the given configuration
      continue-on-error: true
      run: cmake --build .

    - uses: actions/upload-artifact@v3
      with:
        name: CMakeFiles
        path: ${{github.workspace}}/CMakeFiles/

    - uses: actions/upload-artifact@v3
      with:
        name: windows-binaries
        path: ${{github.workspace}}/bin
        
#  build-n-cache-assimp-linux:
#     runs-on: ubuntu-latest
#     steps:
#     - name: chmod /usr/local
#       run: sudo chmod -R 777 /usr/local

#     - name: Cache Assimp
#       id: cache-assimp-linux
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-assimp-linux
#       with:
#         # Assimp cache files are stored in `/home/runner/work/QtMeshEditor/assimp` on Linux
#         path: |
#                /usr/local/lib/cmake/
#                /usr/local/include/assimp
#                /usr/local/lib/pkgconfig/assimp.pc
#                /usr/local/lib/libassimp*
#         #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('/home/runner/work/QtMeshEditor/QtMeshEditor/assimp') }}
#         # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the assimp repo.
#         key: ${{ runner.os }}-build-${{ env.cache-name }}

#     - if: steps.cache-assimp-linux.outputs.cache-hit != 'true'
#       name: Check out Assimp repo
#       uses: actions/checkout@master
#       with:
#           repository: assimp/assimp
#           path: /home/runner/work/QtMeshEditor/QtMeshEditor/assimp
         
#     - if: steps.cache-assimp-linux.outputs.cache-hit != 'true'
#       name: Build Assimp repo
#       run: |
#             cmake -B /home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build -S /home/runner/work/QtMeshEditor/QtMeshEditor/assimp -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#             cd /home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build/
#             sudo make install -j8

#  build-n-cache-ogre-linux:
#     needs: build-n-cache-assimp-linux
#     runs-on: ubuntu-latest
#     steps:
#     - name: chmod /usr/local
#       run: sudo chmod -R 777 /usr/local
      
#     - name: Cache Assimp
#       id: cache-assimp-linux
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-assimp-linux
#       with:
#         # Assimp cache files are stored in `/home/runner/work/QtMeshEditor/assimp` on Linux/macOS
#         path: |
#                /usr/local/lib/cmake/
#                /usr/local/include/assimp
#                /usr/local/lib/pkgconfig/assimp.pc
#                /usr/local/lib/libassimp*
#         #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('/home/runner/work/QtMeshEditor/QtMeshEditor/assimp') }}
#         # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the assimp repo.
#         key: ${{ runner.os }}-build-${{ env.cache-name }}
      
#     - name: Cache Ogre
#       id: cache-ogre-linux
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-ogre-linux
#       with:
#         path: |
#                /usr/local/lib/lib*
#                /usr/local/share/OGRE/
#                /usr/local/share/OGRE/
#                /usr/local/include/OGRE/
#                /usr/local/lib/OGRE/
#                /usr/local/lib/pkgconfig/
#         key: ${{ runner.os }}-build-${{ env.cache-name }}

#     - if: steps.cache-ogre-linux.outputs.cache-hit != 'true'
#       name: install openGL
#       run: |
#             sudo apt update
#             sudo apt-get install freeglut3-dev libxrandr-dev
            
#     - if: steps.cache-ogre-linux.outputs.cache-hit != 'true'
#       name: Check out ogre repo
#       uses: actions/checkout@master
#       with:
#           repository: OGRECave/ogre
#           path: /home/runner/work/QtMeshEditor/QtMeshEditor/ogre
         
#     - if: steps.cache-ogre-linux.outputs.cache-hit != 'true'
#       name: Build Ogre3D repo
#       run: |
#             sudo cmake -B /home/runner/work/QtMeshEditor/QtMeshEditor/ogre-build -S /home/runner/work/QtMeshEditor/QtMeshEditor/ogre -DOGRE_BUILD_PLUGIN_ASSIMP=ON -Dassimp_DIR=/usr/local/lib/cmake/assimp-5.2/ -DOGRE_BUILD_PLUGIN_DOT_SCENE=ON -DOGRE_BUILD_RENDERSYSTEM_GL=ON -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON -DOGRE_BUILD_RENDERSYSTEM_GLES2=OFF -DOGRE_BUILD_TESTS=OFF -DOGRE_BUILD_TOOLS=OFF -DOGRE_BUILD_SAMPLES=OFF -DOGRE_BUILD_COMPONENT_CSHARP=OFF -DOGRE_BUILD_COMPONENT_JAVA=OFF -DOGRE_BUILD_COMPONENT_PYTHON=OFF -DOGRE_INSTALL_TOOLS=OFF -DOGRE_INSTALL_DOCS=OFF -DOGRE_INSTALL_SAMPLES=OFF -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#             cd /home/runner/work/QtMeshEditor/QtMeshEditor/ogre-build/
#             sudo make install -j8
      
#  build-linux:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     #needs: [build-n-cache-assimp-linux, build-n-cache-ogre-linux]
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3
#       with:
#          submodules: true
         
#     - name: Install Qt
#       uses: jurplel/install-qt-action@v3
#       with:
#         aqtversion: '==2.1.*'
#         version: '6.5.0'
#         host: 'linux'
#         target: 'desktop'
#         arch: 'gcc_64'

#     - name: chmod /usr/local
#       run: sudo chmod -R 777 /usr/local

#     - name: Cache Assimp
#       id: cache-assimp-linux
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-assimp-linux
#       with:
#         # Assimp cache files are stored in `/home/runner/work/QtMeshEditor/assimp` on Linux/macOS
#         path: |
#                /usr/local/lib/cmake/
#                /usr/local/include/assimp
#                /usr/local/lib/pkgconfig/assimp.pc
#                /usr/local/lib/libassimp*
#         # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the assimp repo.
#         key: ${{ runner.os }}-build-${{ env.cache-name }}
#         restore-keys: |
#           ${{ runner.os }}-build-${{ env.cache-name }}-
      
#     - name: Cache Ogre
#       id: cache-ogre-linux
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-ogre-linux
#       with:
#         path: |
#                /usr/local/lib/lib*
#                /usr/local/share/OGRE/
#                /usr/local/share/OGRE/
#                /usr/local/include/OGRE/
#                /usr/local/lib/OGRE/
#                /usr/local/lib/pkgconfig/
#         # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the ogre repo.
#         key: ${{ runner.os }}-build-${{ env.cache-name }}

#     - name: Cache .o files
#       id: cache-build-linux
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-build-linux
#       with:
#         path: src/CMakeFiles/QtMeshEditor.dir/
# #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('/home/runner/work/QtMeshEditor/QtMeshEditor/src') }}
#         key: ${{ runner.os }}-build-${{ env.cache-name }}

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       #run: sudo cmake -B ${{github.workspace}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DQt6_DIR=/home/runner/work/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6 -DQT_DIR=/home/runner/work/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6 -DQt6GuiTools_DIR=/home/runner/work/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6GuiTools 
#       run: sudo cmake -S . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DQt6_DIR=/home/runner/work/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6 -DQT_DIR=/home/runner/work/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6 -DQt6GuiTools_DIR=/home/runner/work/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6GuiTools 

#     - name: Build
#       # Build your program with the given configuration
#       run: |
#             sudo make install -j8
#             sudo chmod +X bin/QtMeshEditor
#             sudo chmod -R 777 bin/

#     - uses: actions/upload-artifact@v3
#       with:
#         name: linux-binaries
#         path: ${{github.workspace}}/bin

#     - name: Test
#       working-directory: ${{github.workspace}}
#       # Execute tests defined by the CMake configuration.
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}

#  build-n-cache-assimp-macos:
#     runs-on: macos-latest
#     steps:
#     - name: Cache Assimp
#       id: cache-assimp-macos
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-assimp-macos
#       with:
#         path: |
#                /usr/local/lib/cmake/
#                /usr/local/include/assimp
#                /usr/local/lib/pkgconfig/assimp.pc
#                /usr/local/lib/libassimp*
#         #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('/home/runner/work/QtMeshEditor/QtMeshEditor/assimp') }}
#         # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the assimp repo.
#         key: ${{ runner.os }}-build-${{ env.cache-name }}
#         restore-keys: |
#           ${{ runner.os }}-build-${{ env.cache-name }}-
          
#     - if: steps.cache-assimp-macos.outputs.cache-hit != 'true'
#       name: Check out Assimp repo
#       uses: actions/checkout@master
#       with:
#           repository: assimp/assimp
#           path: /Users/runner/work/QtMeshEditor/QtMeshEditor/assimp
         
#     - if: steps.cache-assimp-macos.outputs.cache-hit != 'true'
#       name: Build Assimp repo
#       run: |
#             cmake -B /Users/runner/work/QtMeshEditor/QtMeshEditor/assimp-build -S /Users/runner/work/QtMeshEditor/QtMeshEditor/assimp -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#             cd /Users/runner/work/QtMeshEditor/QtMeshEditor/assimp-build/
#             sudo make install -j8

#  build-n-cache-ogre-macos:
# #     needs: build-n-cache-assimp-macos
#     runs-on: macos-latest
#     steps:    
#     - name: Cache Assimp
#       id: cache-assimp-macos
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-assimp-macos
#       with:
#         path: |
#                /usr/local/lib/cmake/
#                /usr/local/include/assimp
#                /usr/local/lib/pkgconfig/assimp.pc
#                /usr/local/lib/libassimp*
#         key: ${{ runner.os }}-build-${{ env.cache-name }}
#         restore-keys: |
#           ${{ runner.os }}-build-${{ env.cache-name }}-
      
#     - name: Cache Ogre
#       id: cache-ogre-macos
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-ogre-macos
#       with:
#         path: ${{github.workspace}}/ogre/SDK
#         key: ${{ runner.os }}-build-${{ env.cache-name }}
            
#     - run: ls /usr/local/lib/
#     - run: ls /usr/local/include
#     - run: ls /Users
# #     - run: ls ${{github.workspace}}
# #     - run: ls /Users/runner/work/QtMeshEditor/QtMeshEditor/ogre/sdk/Media/
# #     - run: ls /Users/runner/work/QtMeshEditor/QtMeshEditor/ogre/sdk/CMake/
# #     - run: ls /Users/runner/work/QtMeshEditor/QtMeshEditor/ogre/sdk/lib/
# #     - run: ls /Users/runner/work/QtMeshEditor/QtMeshEditor/ogre/sdk/lib/pkgconfig
# #     - run: echo ${{github.workspace}}
    
#     - if: steps.cache-ogre-macos.outputs.cache-hit != 'true'
#       name: Check out ogre repo
#       uses: actions/checkout@master
#       with:
#           repository: OGRECave/ogre
#           path: ${{github.workspace}}/ogre
         
#     - if: steps.cache-ogre-macos.outputs.cache-hit != 'true'
#       name: Build Ogre3D repo
#       run: |
#             cd ${{github.workspace}}/ogre/
#             sudo cmake -S . -DOGRE_BUILD_PLUGIN_ASSIMP=ON -Dassimp_DIR=/usr/local/lib/cmake/assimp-5.2/ -DOGRE_BUILD_PLUGIN_DOT_SCENE=ON -DOGRE_BUILD_RENDERSYSTEM_GL=ON -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON -DOGRE_BUILD_RENDERSYSTEM_GLES2=OFF -DOGRE_BUILD_TESTS=OFF -DOGRE_BUILD_TOOLS=OFF -DOGRE_BUILD_SAMPLES=OFF -DOGRE_BUILD_COMPONENT_CSHARP=OFF -DOGRE_BUILD_COMPONENT_JAVA=OFF -DOGRE_BUILD_COMPONENT_PYTHON=OFF -DOGRE_INSTALL_TOOLS=OFF -DOGRE_INSTALL_DOCS=OFF -DOGRE_INSTALL_SAMPLES=OFF -DOGRE_BUILD_LIBS_AS_FRAMEWORKS=OFF -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#             sudo make install -j8

 build-macos:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #  needs: [build-n-cache-assimp-macos, build-n-cache-ogre-macos]
#     needs: [build-n-cache-ogre-macos]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
      with:
         submodules: true
         
    - run: |
            ls ${{github.workspace}}/src/dependencies/ogre-procedural
            cd ${{github.workspace}}/src/dependencies/ogre-procedural
            git checkout 978e34ffc4079b804bcde3a021686f5dec36e839
            git branch
            git status
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==2.1.*'
        version: '6.5.0'
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        tools: 'tools_cmake'

    - name: Cache Assimp
      id: cache-assimp-macos
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-macos
      with:
        path: |
               /usr/local/lib/cmake/
               /usr/local/include/assimp
               /usr/local/lib/pkgconfig/assimp.pc
               /usr/local/lib/libassimp*
        key: ${{ runner.os }}-build-${{ env.cache-name }}
      
    - name: Cache Ogre
      id: cache-ogre-macos
      uses: actions/cache@v3
      env:
        cache-name: cache-ogre-macos
      with:
        path: ${{github.workspace}}/ogre/SDK
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - run: ls /Users/runner/work/QtMeshEditor/QtMeshEditor/ogre/SDK/lib/
    - run: ls /Users/runner/work/QtMeshEditor/QtMeshEditor/ogre/SDK/lib/OGRE/

    - name: Cache .o files
      id: cache-build-macos
      uses: actions/cache@v3
      env:
        cache-name: cache-build-macos
      with:
        path: src/CMakeFiles/QtMeshEditor.dir/
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Configure CMake
      continue-on-error: true
      env:
         OGRE_DIR: ${{github.workspace}}/ogre/SDK/CMake/
      run: |
            sudo cmake -S . \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DQt6_DIR=/Users/runner/work/QtMeshEditor/Qt/6.5.0/clang_64/lib/cmake/Qt6 \
            -DQT_DIR=/Users/runner/work/QtMeshEditor/Qt/6.5.0/clang_64/lib/cmake/Qt6 \
            -DQt6GuiTools_DIR=/Users/runner/work/QtMeshEditor/Qt/6.5.0/clang_64/lib/cmake/Qt6GuiTools \
            -DOGRE_DIR=${{github.workspace}}/ogre/SDK/CMake/ 
    
    - name: Build
      # Build your program with the given configuration
      continue-on-error: true
      run: sudo make install -j8

#     - uses: actions/upload-artifact@v3
#       with:
#         name: CMakeFiles-build-macos
#         path: /Users/runner/work/QtMeshEditor/QtMeshEditor/ogre/CMakeFiles
        
    - uses: actions/upload-artifact@v3
      with:
        name: macos-binaries
        path: ${{github.workspace}}/bin
