name: CMake

on: 
   push:
     branches: [ "master" ]
#    pull_request:
#      branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  ASSIMP_HOME: /home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build/usr/local/lib/

jobs:
#  build-windows:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: windows-latest

#     steps:
#     - uses: actions/checkout@v3
    
#     - name: Install Qt
#       uses: jurplel/install-qt-action@v3
#       with:
#         aqtversion: '==2.1.*'
#         version: '6.5.0'
#         host: 'windows'
#         target: 'desktop'
#         arch: 'win64_mingw'
#         tools: 'tools_cmake'

      
 build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

#     - name: Cache Qt
#       id: cache-qt-linux
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-qt-linux
#       with:
#         # qt cache files are stored in `/home/runner/work/QtMeshEditor/Qt` on Linux/macOS
#         path: /home/runner/work/QtMeshEditor/Qt
#         key: ${{ runner.os }}-build-${{ env.cache-name }}-
#         restore-keys: |
#           ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==2.1.*'
        version: '6.5.0'
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64'

    - name: chmod /usr/local
      run: sudo chmod -R 777 /usr/local

    - name: Cache Assimp
      id: cache-assimp-linux
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-linux
      with:
        # Assimp cache files are stored in `/home/runner/work/QtMeshEditor/assimp` on Linux/macOS
        path: |
               /usr/local/include/assimp
               /usr/local/lib/libassimp.so
        #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('/home/runner/work/QtMeshEditor/QtMeshEditor/assimp') }}
        # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the assimp repo.
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - if: steps.cache-assimp-linux.outputs.cache-hit != 'true'
      name: Check out Assimp repo
      uses: actions/checkout@master
      with:
          repository: assimp/assimp
          path: /home/runner/work/QtMeshEditor/QtMeshEditor/assimp

         
    - if: steps.cache-assimp-linux.outputs.cache-hit != 'true'
      name: Build Assimp repo
      run: |
            cmake -B /home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build -S /home/runner/work/QtMeshEditor/QtMeshEditor/assimp -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
            cd /home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build/
            sudo make install -j8

    - name: Cache Ogre
      id: cache-ogre-linux
      uses: actions/cache@v3
      env:
        cache-name: cache-ogre-linux
      with:
        path: |
               /usr/local/lib/lib*
               /usr/local/share/OGRE/
               /usr/local/share/OGRE/
               /usr/local/include/OGRE/
               /usr/local/lib/OGRE/
               /usr/local/lib/pkgconfig/
        #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('/home/runner/work/QtMeshEditor/QtMeshEditor/ogre') }}
        # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the ogre repo.
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - if: steps.cache-ogre-linux.outputs.cache-hit != 'true'
      name: Check out ogre repo
      uses: actions/checkout@master
      with:
          repository: OGRECave/ogre
          path: /home/runner/work/QtMeshEditor/QtMeshEditor/ogre

         
    - if: steps.cache-ogre-linux.outputs.cache-hit != 'true'
      name: Build Ogre3D repo
      run: |
            sudo cmake -B /home/runner/work/QtMeshEditor/QtMeshEditor/ogre-build -S /home/runner/work/QtMeshEditor/QtMeshEditor/ogre -DOGRE_BUILD_PLUGIN_ASSIMP=ON -Dassimp_DIR=/home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build/usr/local/lib/cmake/assimp-5.2/ -DOGRE_BUILD_RENDERSYSTEM_GLES2=OFF -DOGRE_BUILD_TESTS=OFF -DOGRE_BUILD_TOOLS=OFF -DOGRE_BUILD_SAMPLES=OFF -DOGRE_BUILD_COMPONENT_CSHARP=OFF -DOGRE_BUILD_COMPONENT_JAVA=OFF -DOGRE_BUILD_COMPONENT_PYTHON=OFF -DOGRE_INSTALL_TOOLS=OFF -DOGRE_INSTALL_DOCS=OFF -DOGRE_INSTALL_SAMPLES=OFF -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
            cd /home/runner/work/QtMeshEditor/QtMeshEditor/ogre-build/
            sudo make install -j8

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: sudo cmake -B ${{github.workspace}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DQt6_DIR=/home/runner/work/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6 -DQt6GuiTools_DIR=/home/runner/work/QtMeshEditor/Qt/6.5.0/gcc_64/lib/cmake/Qt6GuiTools -DASSIMP_INCLUDE_DIR=/home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build/usr/local/include/assimp -DASSIMP_LIBRARY_REL=/home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build/usr/local/lib/libassimp.so -Dpkgcfg_lib_ASSIMP_assimp=/home/runner/work/QtMeshEditor/QtMeshEditor/assimp-build/usr/local/lib/libassimp.so 

    - name: Build
      # Build your program with the given configuration
      run: sudo make install -j8


#     - uses: actions/upload-artifact@v3
#       with:
#         name: linux-binaries
#         path: ${{github.workspace}}/bin
        
#     - name: Download Artifacts
#       uses: actions/download-artifact@v3
#       with:
#         path: ${{github.workspace}}/bin

#     - name: Test
#       working-directory: ${{github.workspace}}
#       # Execute tests defined by the CMake configuration.
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}

#  build-macos:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: macos-latest

#     steps:
#     - uses: actions/checkout@v3
    
#     - name: Install Qt
#       uses: jurplel/install-qt-action@v3
#       with:
#         aqtversion: '==2.1.*'
#         version: '6.5.0'
#         host: 'mac'
#         target: 'desktop'
#         arch: 'clang_64'
#         tools: 'tools_cmake'
