name: Deploy Windows

on: 
   push:
      branches: [ "master" ]
   pull_request:
      branches: [ "master" ]
   release:
      types: [published]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  AQT_VERSION: '==3.3.*'
  QT_VERSION: '6.9.1'
  ASSIMP_VERSION: '6.0.2'
  ASSIMP_DIR_VERSION: '6.0'
  OGRE_VERSION: '14.3.4'

jobs:
####################################################################
# Windows Deploy
####################################################################

 build-n-cache-assimp-windows:
   runs-on: windows-latest
   steps:
    - name: Cache Assimp
      id: cache-assimp-windows
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-windows
      with:
        # It is caching the folder that also contains source and building files, maybe in the future it would be nice cache only the includes and dll
        path: |
               C:/PROGRA~2/Assimp
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        
    - if: steps.cache-assimp-windows.outputs.cache-hit != 'true'
      name: Set up MinGW
      uses: e-t-l/setup-mingw@patch-1 #egor-tensin/setup-mingw@v2
      with:
          platform: x64            
    
    - if: steps.cache-assimp-windows.outputs.cache-hit != 'true'
      name: Check out Assimp repo
      uses: actions/checkout@master
      with:
          repository: assimp/assimp
          ref: v${{ env.ASSIMP_VERSION }}
          path: ${{github.workspace}}/assimp
      
    - if: steps.cache-assimp-windows.outputs.cache-hit != 'true'
      name: Build Assimp repo
      env:
         CMAKE_GENERATOR: "MinGW Makefiles"
      run: |
            cd ${{github.workspace}}/assimp
            cmake -S . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_GENERATOR="MinGW Makefiles" -DASSIMP_WARNINGS_AS_ERRORS=OFF
            mingw32-make install -j8
            xcopy  /I  "C:/PROGRA~2/Assimp"  "${{github.workspace}}/assimp-build"
      shell: cmd
            
 build-n-cache-ogre-windows:
    needs: build-n-cache-assimp-windows
    runs-on: windows-latest
    steps:
    - name: Cache Assimp
      id: cache-assimp-windows
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-windows
      with:
        path: |
               C:/PROGRA~2/Assimp
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Cache Ogre
      id: cache-ogre-windows
      uses: actions/cache@v3
      env:
        cache-name: cache-ogre-windows
      with:
        path: ${{github.workspace}}/ogre-build/SDK
        # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the ogre repo.
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - if: steps.cache-ogre-windows.outputs.cache-hit != 'true'
      name: Install Doxygen
      shell: cmd
      run: |
        curl -L -o doxygen-installer.exe "https://www.doxygen.nl/files/doxygen-1.9.7-setup.exe"
        doxygen-installer.exe /VERYSILENT
            
    - if: steps.cache-ogre-windows.outputs.cache-hit != 'true'
      name: Check out ogre repo
      uses: actions/checkout@master
      with:
          repository: OGRECave/ogre
          ref: v${{ env.OGRE_VERSION }}
          path: ${{github.workspace}}/ogre

    - if: steps.cache-ogre-windows.outputs.cache-hit != 'true'
      name: Install Qt (for MinGW)
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: ${{ env.AQT_VERSION }}
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
        tools: 'tools_cmake tools_mingw1310'
        
    - if: steps.cache-ogre-windows.outputs.cache-hit != 'true'
      name: Add Qt MinGW to PATH for Ogre build
      run: |
        echo "D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "Added Qt MinGW 13.1.0 to PATH for Ogre build"
        where gcc.exe
        gcc --version
      shell: powershell
           
    - if: steps.cache-ogre-windows.outputs.cache-hit != 'true'
      name: Build Ogre3D
      shell: powershell
      env:
        CMAKE_GENERATOR: "MinGW Makefiles"
        ASSIMP_DIR: "C:/Program Files (x86)/Assimp/lib/cmake/assimp-${{ env.ASSIMP_DIR_VERSION }}/"
        PATH: "D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin;D:/a/QtMeshEditor/Qt/Tools/CMake_64/bin;${{ env.PATH }}"
      run: |
        Write-Host "Verifying Ogre build tools:"
        Write-Host "gcc location: $((Get-Command gcc.exe).Source)"
        Write-Host "g++ location: $((Get-Command g++.exe).Source)"
        Write-Host "mingw32-make location: $((Get-Command mingw32-make.exe).Source)"
        Write-Host "cmake location: $((Get-Command cmake.exe).Source)"
        Set-Location "${{github.workspace}}/ogre"
        cmake -B "${{github.workspace}}/ogre-build" -S . -DDOXYGEN_EXECUTABLE="C:\Program Files\doxygen\bin\doxygen.exe" -DCMAKE_C_COMPILER="D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin/gcc.exe" -DCMAKE_CXX_COMPILER="D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin/g++.exe" -DCMAKE_CXX_STANDARD=17 -DOGRE_BUILD_PLUGIN_ASSIMP=ON -DOGRE_BUILD_PLUGIN_PCZ=ON -DOGRE_BUILD_PLUGIN_DOT_SCENE=ON -DOGRE_BUILD_RENDERSYSTEM_GL=ON -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON -DOGRE_BUILD_RENDERSYSTEM_GLES2=OFF -DOGRE_BUILD_RENDERSYSTEM_D3D9=OFF -DOGRE_BUILD_RENDERSYSTEM_D3D11=OFF -DOGRE_BUILD_TESTS=OFF -DOGRE_BUILD_TOOLS=OFF -DOGRE_BUILD_SAMPLES=OFF -DOGRE_BUILD_COMPONENT_CSHARP=OFF -DOGRE_BUILD_COMPONENT_JAVA=OFF -DOGRE_BUILD_COMPONENT_PYTHON=OFF -DOGRE_INSTALL_TOOLS=OFF -DOGRE_INSTALL_DOCS=OFF -DOGRE_INSTALL_SAMPLES=OFF -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        Set-Location "${{github.workspace}}/ogre-build"
        D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin/mingw32-make.exe install -j8
        
 build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    needs: [build-n-cache-assimp-windows, build-n-cache-ogre-windows]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
         submodules: true

    - name: Cache Assimp
      id: cache-assimp-windows
      uses: actions/cache@v3
      env:
        cache-name: cache-assimp-windows
      with:
        # It is caching the folder that also contains source and building files, maybe in the future it would be nice cache only the includes and dll
        path: |
               C:/PROGRA~2/Assimp
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    
    - name: Cache Ogre
      id: cache-ogre-windows
      uses: actions/cache@v3
      env:
        cache-name: cache-ogre-windows
      with:
        path: ${{github.workspace}}/ogre-build/SDK
        # Need to delete manually if needed to rebuild. Until I find a better solution for detecting changes in the ogre repo.
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: ${{ env.AQT_VERSION }}
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
        tools: 'tools_cmake tools_mingw1310'
        
    - name: Add Qt MinGW to PATH
      run: |
        echo "D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "Added Qt MinGW 13.1.0 to PATH"
        where gcc.exe
        gcc --version
      shell: powershell
     
    - name: Configure CMake
      env:
        CMAKE_GENERATOR: "MinGW Makefiles"
        OGRE_DIR: ${{github.workspace}}/ogre-build/SDK/CMake/
        ASSIMP_DIR: "C:/Program Files (x86)/Assimp/lib/cmake/assimp-${{ env.ASSIMP_DIR_VERSION }}/"
        PATH: "D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin;D:/a/QtMeshEditor/Qt/Tools/CMake_64/bin;${{ env.PATH }}"
      run: |
        Write-Host "Verifying Windows build tools:"
        Write-Host "gcc location: $((Get-Command gcc.exe).Source)"
        Write-Host "g++ location: $((Get-Command g++.exe).Source)"
        Write-Host "mingw32-make location: $((Get-Command mingw32-make.exe).Source)"
        Write-Host "cmake location: $((Get-Command cmake.exe).Source)"
        cmake -S . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER="D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin/gcc.exe" -DCMAKE_CXX_COMPILER="D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin/g++.exe" -DCMAKE_CXX_STANDARD=17 -DASSIMP_DIR="C:/Program Files (x86)/Assimp/lib/cmake/assimp-${{ env.ASSIMP_DIR_VERSION }}/" -DASSIMP_INCLUDE_DIR="C:/Program Files (x86)/Assimp/include" -DQt6_DIR="D:/a/QtMeshEditor/Qt/${{ env.QT_VERSION }}/mingw_64/lib/cmake/Qt6" -DQT_DIR="D:/a/QtMeshEditor/Qt/${{ env.QT_VERSION }}/mingw_64/lib/cmake/Qt6" -DQt6GuiTools_DIR="D:/a/QtMeshEditor/Qt/${{ env.QT_VERSION }}/mingw_64/lib/cmake/Qt6GuiTools" -DOGRE_DIR="${{github.workspace}}/ogre-build/SDK/CMake/"
      shell: powershell

    - name: Build
      env:
        PATH: "D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin;D:/a/QtMeshEditor/Qt/Tools/CMake_64/bin;${{ env.PATH }}"
      run: D:/a/QtMeshEditor/Qt/Tools/mingw1310_64/bin/mingw32-make.exe install -j8
      shell: powershell

    - name: Packaging
      run: |
            Write-Host "=== Windows Packaging Debug ==="
            Write-Host "Current directory: $(Get-Location)"
            Write-Host "Workspace: ${{github.workspace}}"
            Write-Host "Bin directory contents:"
            if (Test-Path "${{github.workspace}}/bin") {
                Get-ChildItem "${{github.workspace}}/bin" -Recurse | Select-Object Name, FullName | Format-Table -AutoSize
            } else {
                Write-Host "Bin directory does not exist!"
            }
            
            Write-Host "=== Creating Package Directory ==="
            mkdir ${{github.workspace}}/pack
            
            # Copy main executable (required)
            if (Test-Path "${{github.workspace}}/bin/QtMeshEditor.exe") {
                Write-Host "✅ Copying QtMeshEditor.exe"
                cp "${{github.workspace}}/bin/QtMeshEditor.exe" "${{github.workspace}}/pack/"
            } else {
                Write-Host "❌ QtMeshEditor.exe not found!"
                exit 1
            }
            
            # Create qt.conf if it doesn't exist (Qt configuration file)
            if (Test-Path "${{github.workspace}}/bin/qt.conf") {
                Write-Host "✅ Copying existing qt.conf"
                cp "${{github.workspace}}/bin/qt.conf" "${{github.workspace}}/pack/"
            } else {
                Write-Host "⚠️  qt.conf not found, creating default one"
                "[Paths]`nPlugins = platforms" | Out-File -FilePath "${{github.workspace}}/pack/qt.conf" -Encoding UTF8
            }
            
            # Copy directories (optional)
            if (Test-Path "${{github.workspace}}/bin/cfg") {
                Write-Host "✅ Copying cfg directory"
                cp -R "${{github.workspace}}/bin/cfg" "${{github.workspace}}/pack/"
            } else {
                Write-Host "⚠️  cfg directory not found, skipping"
            }
            
            if (Test-Path "${{github.workspace}}/bin/media") {
                Write-Host "✅ Copying media directory"
                cp -R "${{github.workspace}}/bin/media" "${{github.workspace}}/pack/"
            } else {
                Write-Host "⚠️  media directory not found, skipping"
            }
            
            if (Test-Path "${{github.workspace}}/bin/platforms") {
                Write-Host "✅ Copying platforms directory"
                cp -R "${{github.workspace}}/bin/platforms" "${{github.workspace}}/pack/"
            } else {
                Write-Host "⚠️  platforms directory not found, skipping"
            }
            
            # Copy DLL files
            $dllFiles = Get-ChildItem "${{github.workspace}}/bin/*.dll" -ErrorAction SilentlyContinue
            if ($dllFiles) {
                Write-Host "✅ Copying $($dllFiles.Count) DLL files"
                cp "${{github.workspace}}/bin/*.dll" "${{github.workspace}}/pack/"
            } else {
                Write-Host "⚠️  No DLL files found in bin directory"
            }
            
            Write-Host "=== Package Contents ==="
            Get-ChildItem "${{github.workspace}}/pack" -Recurse | Select-Object Name, FullName | Format-Table -AutoSize
            
            Write-Host "=== Creating ZIP Archive ==="
            cd "${{github.workspace}}/pack"
            7z a -tzip "${{github.workspace}}/QtMeshEditor-${{github.ref_name}}-win64.zip" *
            
            Write-Host "✅ Packaging completed successfully"
      shell: powershell

    - if: github.event_name == 'release' && github.event.action == 'published'
      uses: actions/upload-artifact@v4
      with:
        name: QtMeshEditor-Windows
        path: ${{github.workspace}}/QtMeshEditor-${{github.ref_name}}-win64.zip

    - if: github.event_name == 'release' && github.event.action == 'published'
      uses: xresloader/upload-to-github-release@main
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          file: QtMeshEditor-${{github.ref_name}}-win64.zip
          update_latest_release: true
          overwrite: false
          verbose: true 